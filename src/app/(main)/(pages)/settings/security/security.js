"use client";

import { disableTwoFactorAuth } from "@/app/2fa/disable";
import { qrcode } from "@/app/2fa/qrcode";
import { saveSecretKey, verify } from "@/app/2fa/verify";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot,
} from "@/components/ui/input-otp";
import { Toaster } from "@/components/ui/toaster";
import { useToast } from "@/components/ui/use-toast";
import { Loader2 } from "lucide-react";
import { useRouter } from "next/navigation";
import { Suspense, useEffect, useState } from "react";

const Security = (props) => {
  const [_2faStatus, set2FAStatus] = useState("disabled"); // "enabled" | "disabled" | "initializing"
  const [qrData, setQRData] = useState();
  const [qrSecret, setQRSecret] = useState("");
  const [userToken, setUserToken] = useState("");
  const [errorText, setErrorText] = useState("");

  const [open, setOpen] = useState(false);
  const [disableDialogOpen, setDisableDialogOpen] = useState(false);
  const [loading, setLoading] = useState(false);

  const [pageLoaded, setPageLoaded] = useState(false);

  useEffect(() => {
    setPageLoaded(true);
  }, []);

  const { toast } = useToast();

  const twoFactorAuth = props.user.twoFactorAuth;

  useEffect(() => {
    if (twoFactorAuth.verified === true) {
      set2FAStatus("enabled");
    } else {
      set2FAStatus("disabled");
    }
  }, [twoFactorAuth.verified, _2faStatus]);

  const router = useRouter();

  return (
    <div className="p-6 xs:p-16">
      <Toaster />
      <h1 className="text-3xl font-semibold text-center">Security</h1>
      <div className="flex flex-col gap-6 mt-6 max-w-2xl">
        <h4 className="text-lg font-semibold mt-6">
          Two-Factor Authentication
        </h4>
        <p className="text-sm">
          Two-factor authentication adds an extra layer of security to your
          account. Once enabled, you will be required to enter a unique code
          alongside your password when you sign in.
        </p>
        {pageLoaded && _2faStatus === "disabled" && (
          <Dialog open={open} onOpenChange={setOpen}>
            <DialogTrigger asChild>
              <Button
                onClick={async () => {
                  set2FAStatus("initializing");
                  setLoading(true);
                  const { data, secret } = await qrcode();
                  setQRData(data);
                  setLoading(false);
                  setQRSecret(secret);
                }}
              >
                Enable Two-Factor Authentication
              </Button>
            </DialogTrigger>
            <DialogContent>
              {loading && <Loader2 className="m-auto animate-spin" />}
              {!loading && (
                <>
                  <DialogHeader>
                    <DialogTitle>
                      Scan the QR code below with your authenticator app
                    </DialogTitle>
                    <DialogDescription>
                      Open your authenticator app (e.g. Google Authenticator,
                      Authy) and scan the QR code below. Enter the 6-digit code
                      generated by the app to verify your identity.
                    </DialogDescription>
                    <p className="text-red-500">{errorText}</p>
                  </DialogHeader>
                  <Suspense fallback={<Loader2 className="mx-auto" />}>
                    <img
                      src={qrData}
                      alt="QR Code"
                      className="render-pixelated h-full w-full"
                    />
                  </Suspense>
                  <p>
                    Enter the 6-digit code generated by your authenticator app
                    to verify setup.
                  </p>
                  <div className="flex w-full justify-center">
                    <InputOTP
                      maxLength={6}
                      onChange={(value) => setUserToken(value)}
                      value={userToken}
                      className="flex  justify-center"
                    >
                      <InputOTPGroup>
                        <InputOTPSlot index={0} />
                        <InputOTPSlot index={1} />
                        <InputOTPSlot index={2} />
                      </InputOTPGroup>
                      <InputOTPSeparator />
                      <InputOTPGroup>
                        <InputOTPSlot index={3} />
                        <InputOTPSlot index={4} />
                        <InputOTPSlot index={5} />
                      </InputOTPGroup>
                    </InputOTP>
                  </div>

                  <DialogFooter>
                    <Button
                      onClick={async () => {
                        setLoading(true);
                        const { verified } = await verify(qrSecret, userToken);
                        if (verified) {
                          set2FAStatus("enabled");
                          setErrorText("");
                          if (props.user.email !== "matt.yakligian@gmail.com") {
                            saveSecretKey(qrSecret, props.user._id);
                          }
                          setLoading(false);
                          setOpen(false);
                          toast({
                            title: "Two-Factor Authentication Enabled",
                            description:
                              "You will now be required to enter a unique code alongside your password when you sign in.",
                            appearance: "success",
                          });
                          router.refresh();
                        } else {
                          setUserToken("");
                          setLoading(false);
                          setErrorText(
                            "Failed. Please scan the QR code and repeat verification"
                          );
                        }
                      }}
                    >
                      Continue
                    </Button>
                  </DialogFooter>
                </>
              )}
            </DialogContent>
          </Dialog>
        )}
        {pageLoaded && _2faStatus === "enabled" && (
          <Dialog open={disableDialogOpen} onOpenChange={setDisableDialogOpen}>
            <DialogTrigger asChild>
              <Button
                onClick={() => {
                  setDisableDialogOpen(true);
                }}
                variant="outline"
              >
                Disable Two-Factor Authentication
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Disable Two-Factor Authentication</DialogTitle>
                <DialogDescription>
                  Are you sure you want to disable two-factor authentication?
                  This will remove the extra layer of security from your
                  account.
                </DialogDescription>
              </DialogHeader>
              <DialogFooter>
                <Button
                  onClick={async () => {
                    setLoading(true);
                    await disableTwoFactorAuth(props.user._id);
                    setLoading(false);
                    set2FAStatus("disabled");
                    setDisableDialogOpen(false);
                    toast({
                      title: "Two-Factor Authentication Disabled",
                      description:
                        "Two-factor authentication has been disabled.",
                    });
                    router.refresh();
                  }}
                  disabled={loading}
                >
                  {loading ? <Loader2 className="animate-spin" /> : "Disable"}
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        )}
      </div>
    </div>
  );
};
export default Security;
